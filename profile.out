Total: 705 samples
     640  90.8%  90.8%      705 100.0% threadFunc
      13   1.8%  92.6%       13   1.8% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       9   1.3%  93.9%        9   1.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       8   1.1%  95.0%        8   1.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       8   1.1%  96.2%       28   4.0% SortedList_insert
       8   1.1%  97.3%       37   5.2% SortedList_lookup
       4   0.6%  97.9%        4   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       3   0.4%  98.3%        3   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:161
       3   0.4%  98.7%        3   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       2   0.3%  99.0%        2   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       2   0.3%  99.3%        2   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       1   0.1%  99.4%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:164
       1   0.1%  99.6%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:206
       1   0.1%  99.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:211
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:212
       1   0.1% 100.0%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       0   0.0% 100.0%      705 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:118
       0   0.0% 100.0%      705 100.0% start_thread
ROUTINE ====================== threadFunc in /u/eng/class/classsve/cs111/proj2B/lab2_list.c
   640    705 Total samples (flat / cumulative)
     .      .  131: 	for(long i = 0; i < numElements; i++){
     .      .  132: 		hashValues[i] = hash(elements[i].key);
     .      .  133: 	}
     .      .  134: }
     .      .  135: 
---
     .      .  136: void* threadFunc(void* id){
     .      .  137: 	long timeDiffSec = 0;
     .      .  138: 	long timeDiffNS = 0;
     .      .  139: 	timeDiff = 0;
     .      .  140: 	timeDiff++;
     .      .  141: 
     .      .  142: 	struct timespec start, stop;
     .      .  143: 	int threadID = *((int*) id);
     .      .  144: 
     .      .  145: 
     .      .  146: 	long startIndex = threadID * numIterations;
     .      .  147: 	long i;
     .      .  148: 	
     .      .  149: 	for(i = startIndex; i < startIndex + numIterations; i++){
     .      .  150: 		//fprintf(stderr, "elementKey: %s\n iteration: %ld\n", elements[i].key, i);
     .      .  151: 		if(isM == 1){
     .      .  152: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  153: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  154: 				exit(1);
     .      .  155: 			}
     .      .  156: 			pthread_mutex_lock(&mutexLocks[hashValues[i]]);
     .      .  157: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  158: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  159: 				exit(1);
     .      .  160: 			}
     .      .  161: 
     .      .  162: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  163: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  164: 			timeDiff += timeDiffSec + timeDiffNS;
     .      .  165: 
     .      .  166: 			SortedList_insert(&listHeads[hashValues[i]], &elements[i]);
     .      .  167: 			pthread_mutex_unlock(&mutexLocks[hashValues[i]]);
     .      .  168: 		}
     .      .  169: 		else if(isS == 1){
     .      .  170: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  171: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  172: 				exit(1);
     .      .  173: 			}
   392    392  174: 			while(__sync_lock_test_and_set(&spinLocks[hashValues[i]], 1));
     .      .  175: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  176: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  177: 				exit(1);
     .      .  178: 			}
     .      .  179: 
     .      .  180: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  181: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  182: 			timeDiff += timeDiffSec;
     .      .  183: 			timeDiff += timeDiffNS;
     .     28  184: 			SortedList_insert(&listHeads[hashValues[i]], &elements[i]);
     .      .  185: 			__sync_lock_release(&spinLocks[hashValues[i]]);
     .      .  186: 		}
     .      .  187: 		else{
     .      .  188: 			SortedList_insert(&listHeads[hashValues[i]], &elements[i]);
     .      .  189: 		}
     .      .  190: 	}
     .      .  191: 
     .      .  192: 	int totalLength = 0;
     .      .  193: 	if(isM == 1){
     .      .  194: 		for(i = 0; i < numSubLists; i++){
     .      .  195: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  196: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  197: 				exit(1);
     .      .  198: 			}
     .      .  199: 			pthread_mutex_lock(&mutexLocks[hashValues[i]]);
     .      .  200: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  201: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  202: 				exit(1);
     .      .  203: 			}
     .      .  204: 
     .      .  205: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  206: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  207: 			timeDiff += timeDiffSec;
     .      .  208: 			timeDiff += timeDiffNS;
     .      .  209: 
     .      .  210: 			int length = SortedList_length(&listHeads[hashValues[i]]);
     .      .  211: 			if(length < 0){
     .      .  212: 				fprintf(stderr, "Error in the length of Sublist: %ld", i);
     .      .  213: 				exit(1);
     .      .  214: 			}
     .      .  215: 			totalLength += length;
     .      .  216: 			pthread_mutex_unlock(&mutexLocks[hashValues[i]]);
     .      .  217: 		}
     .      .  218: 	}
     .      .  219: 	else if(isS == 1){
     .      .  220: 		for(i = 0; i < numSubLists; i++){
     .      .  221: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  222: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  223: 				exit(1);
     .      .  224: 			}
     .      .  225: 			while(__sync_lock_test_and_set(&spinLocks[hashValues[i]], 1));
     .      .  226: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  227: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  228: 				exit(1);
     .      .  229: 			}
     .      .  230: 
     .      .  231: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  232: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  233: 			timeDiff += timeDiffSec;
     .      .  234: 			timeDiff += timeDiffNS;
     .      .  235: 
     .      .  236: 			int length = SortedList_length(&listHeads[hashValues[i]]);
     .      .  237: 			if(length < 0){
     .      .  238: 				fprintf(stderr, "Error in the length of Sublist: %ld", i);
     .      .  239: 				exit(1);
     .      .  240: 			}
     .      .  241: 			totalLength += length;
     .      .  242: 
     .      .  243: 			__sync_lock_release(&spinLocks[hashValues[i]]);
     .      .  244: 		}
     .      .  245: 	}
     .      .  246: 
     .      .  247: 	if(totalLength < 0){
     .      .  248: 		fprintf(stderr, "Error with the length in threadFunc.\n");
     .      .  249: 		exit(2);
     .      .  250: 	}
     .      .  251: 	
     .      .  252: 
     .      .  253: 
     .      .  254: 	SortedListElement_t* e;
     .      .  255: 	for(i = startIndex; i < startIndex + numIterations; i++){
     .      .  256: 		if(isM == 1){
     .      .  257: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  258: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  259: 				exit(1);
     .      .  260: 			}
     .      .  261: 			pthread_mutex_lock(&mutexLocks[hashValues[i]]);
     .      .  262: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  263: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  264: 				exit(1);
     .      .  265: 			}
     .      .  266: 
     .      .  267: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  268: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  269: 			timeDiff += timeDiffSec;
     .      .  270: 			timeDiff += timeDiffNS;
     .      .  271: 			e = SortedList_lookup(&listHeads[hashValues[i]], elements[i].key);
     .      .  272: 			
     .      .  273: 			if(e != NULL){
     .      .  274: 				if(SortedList_delete(e) != 0){
     .      .  275: 					fprintf(stderr, "Error with deleting an element.\n");
     .      .  276: 					exit(2);
     .      .  277: 				}
     .      .  278: 			}
     .      .  279: 			else{
     .      .  280: 				fprintf(stderr, "Error with looking up the element.\n");
     .      .  281: 				exit(2);
     .      .  282: 			}
     .      .  283: 			pthread_mutex_unlock(&mutexLocks[hashValues[i]]);
     .      .  284: 		}
     .      .  285: 		else if(isS == 1){
     .      .  286: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  287: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  288: 				exit(1);
     .      .  289: 			}
   248    248  290: 			while(__sync_lock_test_and_set(&spinLocks[hashValues[i]], 1));
     .      .  291: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  292: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  293: 				exit(1);
     .      .  294: 			}
     .      .  295: 
     .      .  296: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  297: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  298: 			timeDiff += timeDiffSec;
     .      .  299: 			timeDiff += timeDiffNS;
     .      .  300: 
     .     37  301: 			e = SortedList_lookup(&listHeads[hashValues[i]], elements[i].key);
     .      .  302: 
     .      .  303: 			if(e != NULL){
     .      .  304: 				if(SortedList_delete(e) != 0){
     .      .  305: 					fprintf(stderr, "Error with deleting an element.\n");
     .      .  306: 					exit(2);
     .      .  307: 				}
     .      .  308: 			}
     .      .  309: 			else{
     .      .  310: 				fprintf(stderr, "Error with looking up the element.\n");
     .      .  311: 				exit(2);
     .      .  312: 			}
     .      .  313: 
     .      .  314: 			__sync_lock_release(&spinLocks[hashValues[i]]);
     .      .  315: 		}
     .      .  316: 		else{
     .      .  317: 			e = SortedList_lookup(&listHeads[hashValues[i]], elements[i].key);
     .      .  318: 
     .      .  319: 		}
     .      .  320: 	}	
     .      .  321: 	return NULL;
     .      .  322: }
---
     .      .  323: 
     .      .  324: 
     .      .  325: void printToCSV(char* yieldType, char* syncType, long numOps, long threadTime, long avgTime, long mutexTime){
     .      .  326: 	fprintf(stdout, "list-%s-%s,%ld,%ld,%ld,%ld,%ld,%ld,%ld\n", yieldType, syncType, numThreads, numIterations, numSubLists, numOps, threadTime, avgTime, mutexTime);
     .      .  327: }
ROUTINE ====================== threadFunc in /u/eng/class/classsve/cs111/proj2B/lab2_list.c
   640    705 Total samples (flat / cumulative)
     .      .  131: 	for(long i = 0; i < numElements; i++){
     .      .  132: 		hashValues[i] = hash(elements[i].key);
     .      .  133: 	}
     .      .  134: }
     .      .  135: 
---
     .      .  136: void* threadFunc(void* id){
     .      .  137: 	long timeDiffSec = 0;
     .      .  138: 	long timeDiffNS = 0;
     .      .  139: 	timeDiff = 0;
     .      .  140: 	timeDiff++;
     .      .  141: 
     .      .  142: 	struct timespec start, stop;
     .      .  143: 	int threadID = *((int*) id);
     .      .  144: 
     .      .  145: 
     .      .  146: 	long startIndex = threadID * numIterations;
     .      .  147: 	long i;
     .      .  148: 	
     .      .  149: 	for(i = startIndex; i < startIndex + numIterations; i++){
     .      .  150: 		//fprintf(stderr, "elementKey: %s\n iteration: %ld\n", elements[i].key, i);
     .      .  151: 		if(isM == 1){
     .      .  152: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  153: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  154: 				exit(1);
     .      .  155: 			}
     .      .  156: 			pthread_mutex_lock(&mutexLocks[hashValues[i]]);
     .      .  157: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  158: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  159: 				exit(1);
     .      .  160: 			}
     .      .  161: 
     .      .  162: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  163: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  164: 			timeDiff += timeDiffSec + timeDiffNS;
     .      .  165: 
     .      .  166: 			SortedList_insert(&listHeads[hashValues[i]], &elements[i]);
     .      .  167: 			pthread_mutex_unlock(&mutexLocks[hashValues[i]]);
     .      .  168: 		}
     .      .  169: 		else if(isS == 1){
     .      .  170: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  171: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  172: 				exit(1);
     .      .  173: 			}
   392    392  174: 			while(__sync_lock_test_and_set(&spinLocks[hashValues[i]], 1));
     .      .  175: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  176: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  177: 				exit(1);
     .      .  178: 			}
     .      .  179: 
     .      .  180: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  181: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  182: 			timeDiff += timeDiffSec;
     .      .  183: 			timeDiff += timeDiffNS;
     .     28  184: 			SortedList_insert(&listHeads[hashValues[i]], &elements[i]);
     .      .  185: 			__sync_lock_release(&spinLocks[hashValues[i]]);
     .      .  186: 		}
     .      .  187: 		else{
     .      .  188: 			SortedList_insert(&listHeads[hashValues[i]], &elements[i]);
     .      .  189: 		}
     .      .  190: 	}
     .      .  191: 
     .      .  192: 	int totalLength = 0;
     .      .  193: 	if(isM == 1){
     .      .  194: 		for(i = 0; i < numSubLists; i++){
     .      .  195: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  196: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  197: 				exit(1);
     .      .  198: 			}
     .      .  199: 			pthread_mutex_lock(&mutexLocks[hashValues[i]]);
     .      .  200: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  201: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  202: 				exit(1);
     .      .  203: 			}
     .      .  204: 
     .      .  205: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  206: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  207: 			timeDiff += timeDiffSec;
     .      .  208: 			timeDiff += timeDiffNS;
     .      .  209: 
     .      .  210: 			int length = SortedList_length(&listHeads[hashValues[i]]);
     .      .  211: 			if(length < 0){
     .      .  212: 				fprintf(stderr, "Error in the length of Sublist: %ld", i);
     .      .  213: 				exit(1);
     .      .  214: 			}
     .      .  215: 			totalLength += length;
     .      .  216: 			pthread_mutex_unlock(&mutexLocks[hashValues[i]]);
     .      .  217: 		}
     .      .  218: 	}
     .      .  219: 	else if(isS == 1){
     .      .  220: 		for(i = 0; i < numSubLists; i++){
     .      .  221: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  222: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  223: 				exit(1);
     .      .  224: 			}
     .      .  225: 			while(__sync_lock_test_and_set(&spinLocks[hashValues[i]], 1));
     .      .  226: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  227: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  228: 				exit(1);
     .      .  229: 			}
     .      .  230: 
     .      .  231: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  232: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  233: 			timeDiff += timeDiffSec;
     .      .  234: 			timeDiff += timeDiffNS;
     .      .  235: 
     .      .  236: 			int length = SortedList_length(&listHeads[hashValues[i]]);
     .      .  237: 			if(length < 0){
     .      .  238: 				fprintf(stderr, "Error in the length of Sublist: %ld", i);
     .      .  239: 				exit(1);
     .      .  240: 			}
     .      .  241: 			totalLength += length;
     .      .  242: 
     .      .  243: 			__sync_lock_release(&spinLocks[hashValues[i]]);
     .      .  244: 		}
     .      .  245: 	}
     .      .  246: 
     .      .  247: 	if(totalLength < 0){
     .      .  248: 		fprintf(stderr, "Error with the length in threadFunc.\n");
     .      .  249: 		exit(2);
     .      .  250: 	}
     .      .  251: 	
     .      .  252: 
     .      .  253: 
     .      .  254: 	SortedListElement_t* e;
     .      .  255: 	for(i = startIndex; i < startIndex + numIterations; i++){
     .      .  256: 		if(isM == 1){
     .      .  257: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  258: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  259: 				exit(1);
     .      .  260: 			}
     .      .  261: 			pthread_mutex_lock(&mutexLocks[hashValues[i]]);
     .      .  262: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  263: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  264: 				exit(1);
     .      .  265: 			}
     .      .  266: 
     .      .  267: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  268: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  269: 			timeDiff += timeDiffSec;
     .      .  270: 			timeDiff += timeDiffNS;
     .      .  271: 			e = SortedList_lookup(&listHeads[hashValues[i]], elements[i].key);
     .      .  272: 			
     .      .  273: 			if(e != NULL){
     .      .  274: 				if(SortedList_delete(e) != 0){
     .      .  275: 					fprintf(stderr, "Error with deleting an element.\n");
     .      .  276: 					exit(2);
     .      .  277: 				}
     .      .  278: 			}
     .      .  279: 			else{
     .      .  280: 				fprintf(stderr, "Error with looking up the element.\n");
     .      .  281: 				exit(2);
     .      .  282: 			}
     .      .  283: 			pthread_mutex_unlock(&mutexLocks[hashValues[i]]);
     .      .  284: 		}
     .      .  285: 		else if(isS == 1){
     .      .  286: 			if(clock_gettime(CLOCK_MONOTONIC, &start) == -1){
     .      .  287: 				fprintf(stderr, "Error in starting the montonic time.\n");
     .      .  288: 				exit(1);
     .      .  289: 			}
   248    248  290: 			while(__sync_lock_test_and_set(&spinLocks[hashValues[i]], 1));
     .      .  291: 			if(clock_gettime(CLOCK_MONOTONIC, &stop) == -1){
     .      .  292: 				fprintf(stderr, "Error in ending the montonic time.\n");
     .      .  293: 				exit(1);
     .      .  294: 			}
     .      .  295: 
     .      .  296: 			timeDiffSec = (stop.tv_sec - start.tv_sec) * BILLION; //find the time difference in nanoseconds
     .      .  297: 			timeDiffNS = stop.tv_nsec - start.tv_nsec;
     .      .  298: 			timeDiff += timeDiffSec;
     .      .  299: 			timeDiff += timeDiffNS;
     .      .  300: 
     .     37  301: 			e = SortedList_lookup(&listHeads[hashValues[i]], elements[i].key);
     .      .  302: 
     .      .  303: 			if(e != NULL){
     .      .  304: 				if(SortedList_delete(e) != 0){
     .      .  305: 					fprintf(stderr, "Error with deleting an element.\n");
     .      .  306: 					exit(2);
     .      .  307: 				}
     .      .  308: 			}
     .      .  309: 			else{
     .      .  310: 				fprintf(stderr, "Error with looking up the element.\n");
     .      .  311: 				exit(2);
     .      .  312: 			}
     .      .  313: 
     .      .  314: 			__sync_lock_release(&spinLocks[hashValues[i]]);
     .      .  315: 		}
     .      .  316: 		else{
     .      .  317: 			e = SortedList_lookup(&listHeads[hashValues[i]], elements[i].key);
     .      .  318: 
     .      .  319: 		}
     .      .  320: 	}	
     .      .  321: 	return NULL;
     .      .  322: }
---
     .      .  323: 
     .      .  324: 
     .      .  325: void printToCSV(char* yieldType, char* syncType, long numOps, long threadTime, long avgTime, long mutexTime){
     .      .  326: 	fprintf(stdout, "list-%s-%s,%ld,%ld,%ld,%ld,%ld,%ld,%ld\n", yieldType, syncType, numThreads, numIterations, numSubLists, numOps, threadTime, avgTime, mutexTime);
     .      .  327: }
